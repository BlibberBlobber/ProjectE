function y = anti_image_filter(x)
%ANTI_IMAGE_FILTER Filters input x and returns output y.

% MATLAB Code
% Generated by MATLAB(R) 9.0 and the DSP System Toolbox 9.2.
% Generated on: 28-Mar-2017 14:06:34

%#codegen

% To generate C/C++ code from this function use the codegen command. Type
% 'help codegen' for more information.

persistent Hd;

if isempty(Hd)
    
    % The following code was used to design the filter coefficients:
    % % Equiripple Lowpass filter designed using the FIRPM function.
    %
    % % All frequency values are in Hz.
    % Fs = 8000;  % Sampling Frequency
    %
    % Fpass = 3000;            % Passband Frequency
    % Fstop = 3750;            % Stopband Frequency
    % Dpass = 0.057501127785;  % Passband Ripple
    % Dstop = 0.001;           % Stopband Attenuation
    % dens  = 20;              % Density Factor
    %
    % % Calculate the order from the parameters using FIRPMORD.
    % [N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);
    %
    % % Calculate the coefficients using the FIRPM function.
    % b  = firpm(N, Fo, Ao, W, {dens});
    
    Hd = dsp.FIRFilter( ...
        'Numerator', [-0.0222516332145571 -0.0219800184481029 ...
        0.0248481169481603 -0.0249309381290173 0.0145517306999329 ...
        0.0104690904640231 -0.0493728771472923 0.0961762599540785 ...
        -0.141104064970508 0.173624776830308 0.814513609259951 0.173624776830308 ...
        -0.141104064970508 0.0961762599540785 -0.0493728771472923 ...
        0.0104690904640231 0.0145517306999329 -0.0249309381290173 ...
        0.0248481169481603 -0.0219800184481029 -0.0222516332145571]);
end

y = step(Hd,x);


% [EOF]
